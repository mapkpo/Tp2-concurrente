@startuml
class Main {
    - int maxFiresForT0
    - Policy policy
    - int creatorThreads
    - int loaderThreadsLeft
    - int loaderThreadsRight
    - int adjustersThreadsLeft
    - int adjustersThreadsRight
    - int trimmersThreads
    - int exportersThreads
    - List<Integer> creator
    - List<Integer> LL
    - List<Integer> LR
    - List<Integer> AL
    - List<Integer> AR
    - List<Integer> T
    - List<Integer> E
    - Rdp rdp
    - Monitor monitor
    - Threads[] creators
    - Threads[] loadersLeft
    - Threads[] loadersRight
    - Threads[] adjustersLeft
    - Threads[] adjustersRight
    - Threads[] trimmers
    - Threads[] exporters
    + void main(String[] args)
}

class Monitor {
  - rdp: Rdp
  - mutex: ReentrantLock
  - boolean allInvariantsCompleted
  - transitionLocks: Map<Integer, Object>
  + Monitor(Rdp rdp)
  + fireTransition(Integer): Boolean
  + finish()
  + areInvariantsCompleted(): Boolean
  + getRdp(): Rdp
}

class Rdp {
    - int transitionsNo
    - double[][] incidenceMatrix
    - double[] initialMarking
    - double[] transitionMatrix
    - List<Integer> transitionSleepTime
    - long[] transitionTime
    - int[] firedCount
    - String sequence
    - int maxInvariant
    - RealMatrix incidence
    - RealVector marking
    - RealVector transition
    + Rdp(int max)
    + boolean isEnabled(int a)
    + List<Integer> whichEnabled()
    + void fire(int a)
    - void updateMarking(RealVector a)
    + void printMarking()
    + int getMarking(int place)
    - void testPlaceInvariant()
    + String getSequence()
    + Boolean completedInvariants()
    + int[] getFiredCounter()
}

class Policy {
  - policyTypeEquitative: boolean
  - rand: Random
  + Policy(boolean a)
  + decide(List<List<Integer>>): List<Integer>
}

class Threads {
  - transitions: List<List<Integer>>
  - monitor: Monitor
  - policy: Policy
  + run()
}

class Log {
- int count
    - Threads[] threadCreator
    - Threads[] threadLeftLoader
    - Threads[] threadRightLoader
    - Threads[] threadLeftAdjusters
    - Threads[] threadRightAdjusters
    - Threads[] threadTrimmers
    - Threads[] threadExporters
    - Monitor monitor
    - File file
    - File file1
    - Long INITIAL_TIME
    + Log(Threads[] threadCreator, Threads[] threadLeftLoader, Threads[] threadRightLoader, Threads[] threadLeftAdjusters, Threads[] threadRightAdjusters, Threads[] threadTrimmers, Threads[] threadExporters, Monitor monitor)
    + void run()
    - void writeFile()
    - void logWriteSequence()
    - void writeSequenceOnly()
}

Main --> Monitor : creates
Main --> Rdp : creates
Main --> Policy : creates
Main --> Threads : creates
Main --> Log : creates

Monitor --> Rdp : uses
Threads --> Monitor : uses
Threads --> Policy : uses
Log --> Monitor : uses
Log --> Threads : reads state
@enduml