@startuml
title Trimmer Thread with Policy Sequence Diagram

participant Main
participant Trimmer
participant Policy
participant Monitor
participant Rdp
participant Log

group Initialization
Main -> Policy: new(true/false)
Main -> Trimmer: new(T, Monitor, Policy)
Main -> Trimmer: start()
Main -> Log: start()
end

group Policy Decision Loop
loop while invariants not completed
Trimmer -> Policy: decide(transitions)
activate Policy

alt Multiple Transitions
Policy -> Policy: rand.nextDouble()
alt Equitative Policy (true)
Policy --> Trimmer: 50/50 choice
else 80-20 Policy (false)
Policy --> Trimmer: 80/20 choice
end
else Single Transition
Policy --> Trimmer: direct return
end
deactivate Policy

Trimmer -> Trimmer: selectedTransitions
loop for each transition in selectedTransitions
Trimmer -> Monitor: fireTransition(TX)
activate Monitor

Monitor -> Rdp: isEnabled(TX)
activate Rdp
alt Not Enabled
Rdp --> Monitor: timeLeft > 0
Monitor -> Trimmer: wait(timeLeft)
deactivate Rdp
deactivate Monitor
else Enabled
Rdp --> Monitor: 0
Monitor -> Rdp: fire(TX)
activate Rdp
Rdp -> Rdp: updateMarking()
Rdp -> Rdp: testInvariants()
deactivate Rdp
Monitor --> Trimmer: return true
deactivate Monitor

Monitor -> Monitor: notifyEnabledTransitions()
end
end
end

group Logging
Log -> Monitor: getRdpState()
Monitor -> Rdp: getFiredCounters()
Monitor -> Rdp: getSequence()
Monitor --> Log: data
Log -> Log: writeFile()
end

group Termination
Monitor -> Monitor: checkCompletion()
alt Invariants Completed
Monitor -> Trimmer: notifyAll()
Trimmer -> Trimmer: terminate()
Monitor -> Log: completion signal
Log -> Log: writeFinalLog()
end
end
@enduml