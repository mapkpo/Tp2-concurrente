@startuml

participant Main
participant Monitor
participant Rdp
participant Policy
participant Threads
participant Log

group Initialization
  Main -> Rdp: new Rdp(maxFiresForT0)
  Main -> Policy: new Policy(isEquitative)
  Main -> Monitor: new Monitor(rdp, policy)
  Main -> Threads: Create threads (creators, loaders, adjusters, etc.)
  Main -> Log: new Log(threads, monitor)
  Main -> Threads: Start all threads
  Main -> Log: Start logger thread
end

group Thread Workflow (e.g., Creator Thread)
  loop while invariants not completed
    Threads -> Monitor: fireTransition(transitions)
    activate Monitor
      Monitor -> Rdp: whichEnabled()
      Rdp --> Monitor: List<Integer> enabledTransitions
      Monitor -> Policy: decide(enabledTransitions)
      Policy --> Monitor: selectedTransition
      Monitor -> Rdp: fire(selectedTransition)
      Rdp -> Rdp: updateMarking()
      Rdp -> Rdp: testPlaceInvariant()
      Rdp --> Monitor: success
      Monitor --> Threads: true/false
    deactivate Monitor
  end
end

group Logging
  loop every 500ms until invariants completed
    Log -> Monitor: areInvariantsCompleted()
    Monitor --> Log: false
    Log -> Log: writeFile()
    Log -> Rdp: getFiredCounter()
    Rdp --> Log: firedCount[]
    Log -> File: Write logs
  end

  Log -> Monitor: areInvariantsCompleted()
  Monitor --> Log: true
  Log -> Log: logWriteSequence()
  Log -> Rdp: getSequence()
  Rdp --> Log: sequence
  Log -> File: Write sequence
end

@enduml