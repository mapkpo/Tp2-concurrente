@startuml

' Main Class
class Main {
    - int maxFiresForT0
    - Policy policy
    - int creatorThreads
    - int loaderThreadsLeft
    - int loaderThreadsRight
    - int adjustersThreadsLeft
    - int adjustersThreadsRight
    - int trimmersThreads
    - int exportersThreads
    - List<Integer> creator
    - List<Integer> LL
    - List<Integer> LR
    - List<Integer> AL
    - List<Integer> AR
    - List<Integer> T
    - List<Integer> E
    - Rdp rdp
    - Monitor monitor
    - Threads[] creators
    - Threads[] loadersLeft
    - Threads[] loadersRight
    - Threads[] adjustersLeft
    - Threads[] adjustersRight
    - Threads[] trimmers
    - Threads[] exporters
    + void main(String[] args)
}

' Monitor Class
class Monitor {
    - Rdp rdp
    - ReentrantLock mutex
    - boolean allInvariantsCompleted
    - Policy policy
    - Semaphore[] transitionSems
    + Monitor(Rdp rdp, Policy policy)
    + Boolean fireTransition(List<Integer> transitions)
    - void finish()
    + boolean areInvariantsCompleted()
    + Rdp getRdp()
}

' Policy Class
class Policy {
    - boolean policyTypeEquitative
    - Random rand
    + Policy(boolean a)
    + int decide(List<Integer> transitions)
}

' Rdp Class
class Rdp {
    - int transitionsNo
    - double[][] incidenceMatrix
    - double[] initialMarking
    - double[] transitionMatrix
    - List<Integer> transitionSleepTime
    - long[] transitionTime
    - int[] firedCount
    - String sequence
    - int maxInvariant
    - RealMatrix incidence
    - RealVector marking
    - RealVector transition
    + Rdp(int max)
    + boolean isEnabled(int a)
    + List<Integer> whichEnabled()
    + void fire(int a)
    - void updateMarking(RealVector a)
    + void printMarking()
    + int getMarking(int place)
    - void testPlaceInvariant()
    + String getSequence()
    + Boolean completedInvariants()
    + int[] getFiredCounter()
}

' Threads Class
class Threads {
    - List<Integer> transitions
    - Monitor monitor
    + Threads(List<Integer> transitions, Monitor monitor)
    + void run()
}

' Log Class
class Log {
    - int count
    - Threads[] threadCreator
    - Threads[] threadLeftLoader
    - Threads[] threadRightLoader
    - Threads[] threadLeftAdjusters
    - Threads[] threadRightAdjusters
    - Threads[] threadTrimmers
    - Threads[] threadExporters
    - Monitor monitor
    - File file
    - File file1
    - Long INITIAL_TIME
    + Log(Threads[] threadCreator, Threads[] threadLeftLoader, Threads[] threadRightLoader, Threads[] threadLeftAdjusters, Threads[] threadRightAdjusters, Threads[] threadTrimmers, Threads[] threadExporters, Monitor monitor)
    + void run()
    - void writeFile()
    - void logWriteSequence()
    - void writeSequenceOnly()
}

' Relationships
Main --> Monitor
Main --> Policy
Main --> Rdp
Main --> Threads
Monitor --> Rdp
Monitor --> Policy
Threads --> Monitor
Log --> Monitor
Log --> Threads

@enduml